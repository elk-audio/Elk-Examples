#!/usr/bin/env python3
'''main_app_full : more complex example of main app controlling multiple plugins'''

__copyright__   = 'Copyright (C) 2020 Modern Ancient Instruments Networked AB, dba Elk'
__license__ = "GPL-3.0"

from math import ceil
import time

from elkpy import sushicontroller as sc

from elk_ui import N_FADERS
from elk_ui import ElkUIController


class ElkBridge(object):
    """
    Bridge / Glue application to connect board UI (pots, buttons, LEDs, etc.)
    to changes in SUSHI's processors.
    """

    def __init__(self):
        self._ui = ElkUIController(self._handle_faders,
                                   self._handle_buttons,
                                   self._handle_encoder_button,
                                   self._handle_encoder)

        self._sushi = sc.SushiController()
        # Caches a list of
        # (proc_info, (param_info_0, ..., param_info_n) )
        self._procs = []
        for t in self._sushi.audio_graph.get_all_tracks():
            for proc in self._sushi.audio_graph.get_track_processors(t.id):
                self._procs.append( (proc, self._sushi.parameters.get_processor_parameters(proc.id)) )
            self._procs.append( (t, self._sushi.parameters.get_processor_parameters(t.id)) )
        self._active_proc_idx = 0
        self._active_param_page = 0
        self._refresh_display()


    def run(self):
        """ Minimal event loop
        """
        self._ui.run()
        while True:
            self._ui.refresh()
            time.sleep(0.05)


    def _handle_faders(self, idx, val):
        """ Send parameter changes to plugin
            and update OLED display
        """
        proc_id = self._procs[self._active_proc_idx][0].id
        param_idx = int(self._active_param_page * N_FADERS + idx)
        param_id = self._procs[self._active_proc_idx][1][param_idx].id
        self._sushi.parameters.set_parameter_value(proc_id, param_id, val)
        self._refresh_display()


    def _handle_buttons(self, idx, val):
        """ Send Note ON / OFF messages to SUSHI
            and update LEDs
        """
        # C scale from C3 to C4
        BUTTON_MIDI_NOTES = [48, 48, 50, 52, 53, 55, 57, 59, 60]

        # play power chord
        for offset in [0, 7, 12]:
            self._sushi.keyboard.send_note_on(0, 0, BUTTON_MIDI_NOTES[idx] + offset, val)
            self._ui.set_led(idx, val)


    def _handle_encoder_button(self, val):
        """ Move to next plugin in list
        """
        if (val > 0):
            self._active_proc_idx += 1
            self._active_proc_idx %= len(self._procs)
            self._active_param_page = 0
            self._refresh_display()


    def _handle_encoder(self, direction):
        """ Move through parameter pages
        """
        self._active_param_page += int(direction)
        self._active_param_page %= self._n_pages()
        self._refresh_display()


    def _refresh_display(self):
        proc_info = self._procs[self._active_proc_idx][0]

        if hasattr(proc_info, 'input_channels'):
            header_line = "Track: %s" % proc_info.name[:14]
        else:
            header_line = "Plug: {0:^9} {1:2}/{2:2}".format(
                    proc_info.name[:11],
                    self._active_param_page+1,
                    self._n_pages()
                )
        param_names = [""] * N_FADERS
        param_vals = [0.0] * N_FADERS
        first_param_idx = int(self._active_param_page * N_FADERS)

        params_in_page = self._procs[self._active_proc_idx][1][first_param_idx:first_param_idx+N_FADERS]

        for n, param in enumerate(params_in_page):
            param_names[n] = param.name[:10]
            param_vals[n] = self._sushi.parameters.get_parameter_value(proc_info.id, param.id)

        param_line1 = "{0:^10} {1:^10}".format(*param_names)
        value_line1 = "{0:^10.2f} {1:^10.2f}".format(*param_vals)

        param_line2 = "{2:^10} {3:^10}".format(*param_names)
        value_line2 = "{2:^10.2f} {3:^10.2f}".format(*param_vals)

        self._ui.set_display_lines([header_line, param_line1, value_line1, param_line2, value_line2])


    def _n_pages(self):
        return ceil(len(self._procs[self._active_proc_idx][1]) / N_FADERS)



if __name__ == '__main__':
    bridge = ElkBridge()
    bridge.run()
